library("rAltmetric")
library("rAltmetric")
library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
library("forcats")
dois <- c("10.1002/prca.201400084","10.1007/978-94-011-0904-8_20","10.1007/s12560-013-9133-1","10.1007/s40258-016-0243-4","10.1038/nrclinonc.2016.217","10.1038/nrgastro.2014.235","10.1038/nrneph.2013.282","10.1071/WR08060","10.1080/03043797.2014.895704","10.1080/09523367.2014.958666","10.1080/106836021000034997","10.1080/10824669.2012.636728","10.1080/14616688.2016.1214977","10.1080/15562948.2013.848007","10.1080/17439884.2014.933847","10.1081/LFT-100105278","10.1093/jeg/2.1.31","10.1097/MLR.0000000000000112","10.1097/PSY.0b013e318148c19a","10.1111/j.1365-2907.1986.tb00036.x","10.1163/156856294x00347","10.1353/jnc.2015.0009","10.1517/14656566.2015.981524","10.1524/zkri.216.8.417.20360","10.1680/mpal.13.00055","10.17660/ActaHortic.1985.169.26","10.3934/mbe.2010.7.195","10.4018/978-1-4666-5982-7.ch015","10.7763/IJCTE.2016.V8.1014")
getArticleData <- function(x) {
print(x)
articleData <- try(altmetrics(doi = x), silent = TRUE)
if (class(articleData) == 'try-error') {
return(NA)
}
articleData
}
na.omit.list <- function(y) { return(y[!sapply(y, function(x) all(is.na(x)))]) } # Removes NAs from list: https://gist.github.com/rhochreiter/7029236
raw_metrics <- lapply(dois, function(x) getArticleData(x))
raw_metrics <- na.omit.list(raw_metrics)
#raw_metrics
metric_data <- ldply(raw_metrics, altmetric_data)
metric_data
# include "cited_by_posts_count" if you want posts as well
columns_to_grab <- c("title", "doi", "pmid", "journal", "cited_by_fbwalls_count", "cited_by_posts_count", "cited_by_feeds_count", "cited_by_gplus_count", "cited_by_msm_count", "cited_by_tweeters_count", "cited_by_accounts_count")
subset_data <- select(metric_data, one_of(columns_to_grab))
reshape_data <- subset_data %>%
gather(cited_by, times, cited_by_fbwalls_count:cited_by_accounts_count) %>%
mutate(cited_by = gsub("_count", "", cited_by)) %>%
mutate(cited_by = gsub("cited_by_", "", cited_by)) %>%
mutate(cited_by = gsub("tweeters", "Twitter", cited_by)) %>%
mutate(cited_by = gsub("fbwalls", "Facebook", cited_by)) %>%
mutate(cited_by = gsub("gplus", "Google+", cited_by)) %>%
mutate(cited_by = gsub("feeds", "Bloggers", cited_by)) %>%
mutate(cited_by = gsub("msm", "News Outlets", cited_by)) %>%
mutate(cited_by = gsub("posts", "Posts", cited_by)) %>%
mutate(cited_by = gsub("accounts", "Total", cited_by)) %>%
mutate(times = as.numeric(times))
graph_data <- reshape_data %>%
filter(times >= 4) %>%
filter(cited_by != "Total")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media")
write.csv(metric_data, file = 'sample_data_altmetrics.csv')
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=reshape_data$title), stat="identity") + labs(x = "Media")
write.csv(metric_data, file = 'sample_data_altmetrics.csv')
dois <- c("10.1002/prca.201400084","10.1007/978-94-011-0904-8_20","10.1007/s12560-013-9133-1","10.1007/s40258-016-0243-4","10.1038/nrclinonc.2016.217","10.1038/nrgastro.2014.235","10.1038/nrneph.2013.282","10.1071/WR08060","10.1080/03043797.2014.895704","10.1080/09523367.2014.958666","10.1080/106836021000034997","10.1080/10824669.2012.636728","10.1080/14616688.2016.1214977","10.1080/15562948.2013.848007","10.1080/17439884.2014.933847","10.1081/LFT-100105278","10.1093/jeg/2.1.31","10.1097/MLR.0000000000000112","10.1097/PSY.0b013e318148c19a","10.1111/j.1365-2907.1986.tb00036.x","10.1163/156856294x00347","10.1353/jnc.2015.0009","10.1517/14656566.2015.981524","10.1524/zkri.216.8.417.20360","10.1680/mpal.13.00055","10.17660/ActaHortic.1985.169.26","10.3934/mbe.2010.7.195","10.4018/978-1-4666-5982-7.ch015","10.7763/IJCTE.2016.V8.1014")
getArticleData <- function(x) {
print(x)
articleData <- try(altmetrics(doi = x), silent = TRUE)
if (class(articleData) == 'try-error') {
return(NA)
}
articleData
}
na.omit.list <- function(y) { return(y[!sapply(y, function(x) all(is.na(x)))]) } # Removes NAs from list: https://gist.github.com/rhochreiter/7029236
raw_metrics <- lapply(dois, function(x) getArticleData(x))
raw_metrics <- na.omit.list(raw_metrics)
#raw_metrics
metric_data <- ldply(raw_metrics, altmetric_data)
metric_data
# include "cited_by_posts_count" if you want posts as well
columns_to_grab <- c("title", "doi", "pmid", "journal", "cited_by_fbwalls_count", "cited_by_posts_count", "cited_by_feeds_count", "cited_by_gplus_count", "cited_by_msm_count", "cited_by_tweeters_count", "cited_by_accounts_count")
subset_data <- select(metric_data, one_of(columns_to_grab))
reshape_data <- subset_data %>%
gather(cited_by, times, cited_by_fbwalls_count:cited_by_accounts_count) %>%
mutate(cited_by = gsub("_count", "", cited_by)) %>%
mutate(cited_by = gsub("cited_by_", "", cited_by)) %>%
mutate(cited_by = gsub("tweeters", "Twitter", cited_by)) %>%
mutate(cited_by = gsub("fbwalls", "Facebook", cited_by)) %>%
mutate(cited_by = gsub("gplus", "Google+", cited_by)) %>%
mutate(cited_by = gsub("feeds", "Bloggers", cited_by)) %>%
mutate(cited_by = gsub("msm", "News Outlets", cited_by)) %>%
mutate(cited_by = gsub("posts", "Posts", cited_by)) %>%
mutate(cited_by = gsub("accounts", "Total", cited_by)) %>%
mutate(times = as.numeric(times))
graph_data <- reshape_data %>%
filter(times >= 4) %>%
filter(cited_by != "Total")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media")
write.csv(metric_data, file = 'sample_data_altmetrics.csv')
View(reshape_data)
View(metric_data)
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + theme_classic()
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + scale_fill_manual(values=cbPalette) + theme_classic()
cbPalette <- c("#999900", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + scale_fill_manual(values=cbPalette) + theme_classic()
cbPalette <- c("#990000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + scale_fill_manual(values=cbPalette) + theme_classic()
cbPalette <- c("#FF0000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + scale_fill_manual(values=cbPalette) + theme_classic()
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + scale_fill_manual(values=cbPalette) + theme_classic()
cbPalette <- c("#333333", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + scale_fill_manual(values=cbPalette) + theme_classic()
View(reshape_data)
View(metric_data)
dois <- c("10.1002/prca.201400084","10.1007/978-94-011-0904-8_20","10.1007/s12560-013-9133-1","10.1007/s40258-016-0243-4","10.1038/nrclinonc.2016.217","10.1038/nrgastro.2014.235","10.1038/nrneph.2013.282","10.1071/WR08060","10.1080/03043797.2014.895704","10.1080/09523367.2014.958666","10.1080/106836021000034997","10.1080/10824669.2012.636728","10.1080/14616688.2016.1214977","10.1080/15562948.2013.848007","10.1080/17439884.2014.933847","10.1081/LFT-100105278","10.1093/jeg/2.1.31","10.1097/MLR.0000000000000112","10.1097/PSY.0b013e318148c19a","10.1111/j.1365-2907.1986.tb00036.x","10.1163/156856294x00347","10.1353/jnc.2015.0009","10.1517/14656566.2015.981524","10.1524/zkri.216.8.417.20360","10.1680/mpal.13.00055","10.17660/ActaHortic.1985.169.26","10.3934/mbe.2010.7.195","10.4018/978-1-4666-5982-7.ch015","10.7763/IJCTE.2016.V8.1014")
getArticleData <- function(x) {
print(x)
articleData <- try(altmetrics(doi = x), silent = TRUE)
if (class(articleData) == 'try-error') {
return(NA)
}
articleData
}
na.omit.list <- function(y) { return(y[!sapply(y, function(x) all(is.na(x)))]) } # Removes NAs from list: https://gist.github.com/rhochreiter/7029236
raw_metrics <- lapply(dois, function(x) getArticleData(x))
raw_metrics <- na.omit.list(raw_metrics)
#raw_metrics
metric_data <- ldply(raw_metrics, altmetric_data)
metric_data
# include "cited_by_posts_count" if you want posts as well
columns_to_grab <- c("title", "doi", "url", "pmid", "journal", "cited_by_fbwalls_count", "cited_by_posts_count", "cited_by_feeds_count", "cited_by_gplus_count", "cited_by_msm_count", "cited_by_tweeters_count", "cited_by_accounts_count")
subset_data <- select(metric_data, one_of(columns_to_grab))
reshape_data <- subset_data %>%
gather(cited_by, times, cited_by_fbwalls_count:cited_by_accounts_count) %>%
mutate(cited_by = gsub("_count", "", cited_by)) %>%
mutate(cited_by = gsub("cited_by_", "", cited_by)) %>%
mutate(cited_by = gsub("tweeters", "Twitter", cited_by)) %>%
mutate(cited_by = gsub("fbwalls", "Facebook", cited_by)) %>%
mutate(cited_by = gsub("gplus", "Google+", cited_by)) %>%
mutate(cited_by = gsub("feeds", "Bloggers", cited_by)) %>%
mutate(cited_by = gsub("msm", "News Outlets", cited_by)) %>%
mutate(cited_by = gsub("posts", "Posts", cited_by)) %>%
mutate(cited_by = gsub("accounts", "Total", cited_by)) %>%
mutate(times = as.numeric(times))
graph_data <- reshape_data %>%
filter(times >= 4) %>%
filter(cited_by != "Total")
cbPalette <- c("#333333", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + scale_fill_manual(values=cbPalette) + theme_classic()
write.csv(metric_data, file = 'sample_data_altmetrics.csv')
View(reshape_data)
View(reshape_data)
library("rAltmetric")
library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
library("forcats")
# provide a list of the dois of articles to get altmetrics for
dois <- c("10.1002/prca.201400084","10.1007/978-94-011-0904-8_20","10.1007/s12560-013-9133-1","10.1007/s40258-016-0243-4","10.1038/nrclinonc.2016.217","10.1038/nrgastro.2014.235","10.1038/nrneph.2013.282","10.1071/WR08060","10.1080/03043797.2014.895704","10.1080/09523367.2014.958666","10.1080/106836021000034997","10.1080/10824669.2012.636728","10.1080/14616688.2016.1214977","10.1080/15562948.2013.848007","10.1080/17439884.2014.933847","10.1081/LFT-100105278","10.1093/jeg/2.1.31","10.1097/MLR.0000000000000112","10.1097/PSY.0b013e318148c19a","10.1111/j.1365-2907.1986.tb00036.x","10.1163/156856294x00347","10.1353/jnc.2015.0009","10.1517/14656566.2015.981524","10.1524/zkri.216.8.417.20360","10.1680/mpal.13.00055","10.17660/ActaHortic.1985.169.26","10.3934/mbe.2010.7.195","10.4018/978-1-4666-5982-7.ch015","10.7763/IJCTE.2016.V8.1014")
# only return if there is data
getArticleData <- function(x) {
print(x)
articleData <- try(altmetrics(doi = x), silent = TRUE)
if (class(articleData) == 'try-error') {
return(NA)
}
articleData
}
na.omit.list <- function(y) { return(y[!sapply(y, function(x) all(is.na(x)))]) } # Removes NAs from list: https://gist.github.com/rhochreiter/7029236
raw_metrics <- lapply(dois, function(x) getArticleData(x))
raw_metrics <- na.omit.list(raw_metrics)
# get the raw_metrics data
metric_data <- ldply(raw_metrics, altmetric_data)
# include "cited_by_posts_count" if you want posts as well
columns_to_grab <- c("title", "doi", "url", "pmid", "journal", "cited_by_fbwalls_count", "cited_by_posts_count", "cited_by_feeds_count", "cited_by_gplus_count", "cited_by_msm_count", "cited_by_tweeters_count", "cited_by_accounts_count")
subset_data <- select(metric_data, one_of(columns_to_grab))
reshape_data <- subset_data %>%
gather(cited_by, times, cited_by_fbwalls_count:cited_by_accounts_count) %>%
mutate(cited_by = gsub("_count", "", cited_by)) %>%
mutate(cited_by = gsub("cited_by_", "", cited_by)) %>%
mutate(cited_by = gsub("tweeters", "Twitter", cited_by)) %>%
mutate(cited_by = gsub("fbwalls", "Facebook", cited_by)) %>%
mutate(cited_by = gsub("gplus", "Google+", cited_by)) %>%
mutate(cited_by = gsub("feeds", "Bloggers", cited_by)) %>%
mutate(cited_by = gsub("msm", "News Outlets", cited_by)) %>%
mutate(cited_by = gsub("posts", "Posts", cited_by)) %>%
mutate(cited_by = gsub("accounts", "Total", cited_by)) %>%
mutate(times = as.numeric(times))
#filter the data by times cited to be greater than or equal to 4
graph_data <- reshape_data %>%
filter(times >= 4) %>%
filter(cited_by != "Total")
#set a color-blind friendly color palette
cbPalette <- c("#333333", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#graph the data
ggplot(graph_data) + geom_bar(aes(fct_infreq(factor(cited_by)), times, fill=doi), stat="identity") + labs(x = "Media") + scale_fill_manual(values=cbPalette) + theme_classic()
#write the data to csv
write.csv(metric_data, file = 'sample_data_altmetrics.csv')
View(reshape_data)
View(graph_data)
View(metric_data)
View(graph_data)
View(metric_data)
View(reshape_data)
View(subset_data)
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrlin, lwd=3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(fit$child)
varChild <- var(x=fit$child)
varChild <- var(fit$model$child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(swirl)
swirl::install_course("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(-X:size)
select(cran, -X:size)
swirl()
-5:20
-(5:20)
select(-(X:size)
)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(size, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
shiny::runApp('shinymlr-test')
devtools::install_github("mlr-org/shinyMlr/package")
devtools::install_github("mlr-org/shinyMlr/package")
setwd("~/Downloads/shinyMlr-master")
runApp()
runApp()
?read_csv
## Get the list of installed packages
installed <- dir(.libPaths())
head(installed)
head(installed, 30)
pwd
getwd()
? .libPaths
.Library
list_dir <- '/Library/Frameworks/R.framework/Resources/library'
## Change accordingly
list_dir <- '/Users/ablaine/Library/Frameworks/R.framework/Resources/library'
## Change accordingly
list_dir <- '/Users/ablaine/Library/Frameworks/R.framework/Resources/library'
## Get the list of installed packages
installed <- dir(.libPaths())
## Save the list for later use
save(installed, file = file.path(list_dir, paste0(Sys.Date(), '-installed.Rdata')))
## Explore the list
head(installed)
## Change accordingly
list_dir <- '/Users/ablaine/Library/Frameworks/R/Resources/library'
## Get the list of installed packages
installed <- dir(.libPaths())
## Save the list for later use
save(installed, file = file.path(list_dir, paste0(Sys.Date(), '-installed.Rdata')))
## Explore the list
head(installed)
save(installed, file = file.path(list_dir, paste0(Sys.Date(), '-installed.Rdata')))
.Library
getwd()
installed
library(rJava)
install.packages("RWeka")
library(RWeka)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
require(rJava)
install.packages("rJava")
java -version
require(rJava)
require(rJava)
library(rJava)
library(RWeka)
install.packages("tidyverse")
install.packages("RWeka")
library(RWeka)
install.packages(rJava)
install.packages("rJava")
library(rJava)
library(RWeka)
library(shiny); runApp('Downloads/demo_Shiny (3).R')
#install.packages("dplyr") # Packages for working with text
#install.packages("rtweet") # More info on this package: http://rtweet.info/
#install.packages("httpuv") # May be required for authentication, depending on your machine
#install.packages("slam") # Required by wordcloud2
#install.packages("wordcloud2") #Package for creating a wordlcoud
#install.packages('shiny')
install.packages('DT')
library(dplyr)
library(rtweet)
library(httpuv)
library(slam)
library(wordcloud2)
library(shiny)
library(DT)
runApp('Downloads/demo_Shiny (3).R')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='al-blaine', token=)
rsconnect::setAccountInfo(name='al-blaine',
token='C0F800B478FA43D0F9DAC6F7DA770309',
secret='+MHEAzNBSefF9RsFSKxqrbKlEBn91zWJ6qHgdWZG')
setwd("~/Desktop/Twitter-Hashtags-master")
setwd("~/Desktop/Twitter-shinyappio")
library(shiny); runApp('Shiny_table.R')
install.packages('DT')
install.packages("DT")
library(dplyr)
library(rtweet)
library(httpuv)
library(slam)
library(wordcloud2)
library(shiny)
library(DT)
library(stringr)
library(rebus)
install.packages("rebus")
runApp('Shiny_table.R')
runApp('Shiny_table.R')
getwd
getwd()
library(rsconnect)
rsconnect::deployApp("/Users/ablaine/Desktop/Twitter-shinyappio")
rsconnect::deployApp("/Users/ablaine/Desktop/Twitter-shinyappio")
shiny::runApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::deployApp("/Users/ablaine/Desktop/tweet-tag-dashboard/app.R")
rsconnect::deployApp("/Users/ablaine/Desktop/tweet-tag-dashboard")
runApp()
runApp()
rsconnect::deployApp("/Users/ablaine/Desktop/tweet-tag-dashboard")
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp("/Users/ablaine/Desktop/tweet-tag-dashboard")
rsconnect::deployApp("/Users/ablaine/Desktop/tweet-tag-dashboard")
rsconnect::deployApp("/Users/ablaine/Desktop/tweet-tag-dashboard")
runApp()
install.packages("revealjs")
library(revealjs)
setwd("~/Desktop/tweet-tag-dashboard")
knitr::opts_chunk$set(echo = TRUE, fig.width=4, fig.height=4, error=FALSE, message=FALSE)
install.packages("highcharter")
install.packages("leaflet")
install.packages("plotly")
library("tidyverse")
library("highcharter")
library("leaflet")
library("plotly")
setwd("~/data-viz-with-r-slides")
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth=1) + theme_classic()
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth=1, col=white) + theme_classic()
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth=1, col="white") + theme_classic()
